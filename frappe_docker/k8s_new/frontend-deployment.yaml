apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"
      # initContainers:
      # - name: wait-for-backend
      #   image: busybox
      #   command:
      #   - sh
      #   - -c
      #   - |
      #     until nslookup backend; do
      #       echo "Waiting for backend service...";
      #       sleep 2;
      #     done;
      containers:
      - name: frontend
        # image: ghcr.io/lxbach10012004/custom-erpnext:1.0.0
        image: asia-southeast1-docker.pkg.dev/erpnext-ptuddn-454813/custom-erp/custom-erpnext:1.0.0
        command:
        - nginx-entrypoint.sh
        env:
        - name: BACKEND
          value: "backend:8000"
        - name: FRAPPE_SITE_NAME_HEADER
          value: "frontend"
        - name: SOCKETIO
          value: "websocket:9000"
        - name: UPSTREAM_REAL_IP_ADDRESS
          value: "127.0.0.1"
        - name: UPSTREAM_REAL_IP_HEADER
          value: "X-Forwarded-For"
        - name: UPSTREAM_REAL_IP_RECURSIVE
          value: "off"
        - name: PROXY_READ_TIMEOUT
          value: "120"
        - name: CLIENT_MAX_BODY_SIZE
          value: "50m"
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: "200m"
            memory: "256Mi"
          limits:
            cpu: "400m"
            memory: "512Mi"
        volumeMounts:
        - name: sites
          mountPath: /home/frappe/frappe-bench/sites
        - name: logs
          mountPath: /home/frappe/frappe-bench/logs
      # volumes:
      # - name: sites
      #   hostPath:
      #     path: "/mnt/data/sites"
      #     type: DirectoryOrCreate
      # - name: logs
      #   hostPath:
      #     path: "/mnt/data/logs"
      #     type: DirectoryOrCreate
      volumes:
      - name: sites
        persistentVolumeClaim:
          claimName: sites
      - name: logs
        persistentVolumeClaim:
          claimName: logs
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  selector:
    app: frontend
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30080
  type: NodePort